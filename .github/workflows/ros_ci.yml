name: ROS2 CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build_and_test:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-desktop
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y \
            python3-colcon-common-extensions \
            python3-pip \
            python3-pytest-cov \
            python3-pytest \
            ros-humble-ros-testing \
            ros-humble-test-msgs \
            ros-humble-gazebo-ros-pkgs \
            ros-humble-rviz2 \
            ros-humble-joint-state-publisher-gui \
            ros-humble-ros-gz
          python3 -m pip install -U \
            pytest-repeat \
            pytest-rerunfailures \
            pytest

      - name: Clone LBR Stack
        run: |
          mkdir -p /ros_ws/src
          cd /ros_ws/src
          git clone https://github.com/lbr-stack/lbr_fri_ros2_stack.git

      - name: Copy Project into Workspace
        run: |
          cp -r $GITHUB_WORKSPACE /ros_ws/src/adaptive-simulation

      - name: Build
        working-directory: /ros_ws
        run: |
          . /opt/ros/humble/setup.sh
          colcon build --symlink-install

      - name: Test
        working-directory: /ros_ws
        run: |
          . /opt/ros/humble/setup.sh
          . install/setup.sh
          colcon test --packages-select adaptive_simulation
          colcon test-result --verbose

  lint:
    runs-on: ubuntu-22.04
    container:
      image: osrf/ros:humble-desktop
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y \
            python3-pip \
            python3-flake8 \
            clang-format-12 \
            clang-tidy-12
          python3 -m pip install -U cpplint

      - name: Run linters
        run: |
          # Python linting
          find . -path "./src/**/*.py" -type f | xargs flake8 --max-line-length=100
          
          # C++ linting
          find . -path "./src/**/*.cpp" -o -path "./include/**/*.hpp" -type f | xargs cpplint --filter=-build/c++11,-runtime/references

      - name: Check formatting
        run: |
          find . -path "./src/**/*.cpp" -o -path "./include/**/*.hpp" -type f | xargs clang-format-12 -i --style=file
          if [[ `git diff` ]]; then
            echo "C++ code formatting issues found. Please run clang-format locally."
            git diff
            exit 1
          fi

  documentation:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      
      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: './doc'
          file-path: './README.md, ./CONTRIBUTING.md'
      
      - name: Count words in documentation
        run: |
          echo "Documentation Statistics:"
          echo "--------------------------"
          find ./doc -name "*.md" | xargs wc -w | sort -nr
          echo "--------------------------"
          total_words=$(find ./doc -name "*.md" | xargs cat | wc -w)
          echo "Total words in documentation: $total_words"
